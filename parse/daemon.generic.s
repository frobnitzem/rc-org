compile: <nil>
compile: (if (paren (~ ($# home) (words <nil> 0))) (home=($ HOME) <nil>))
compile: (if (paren (~ ($# home) (words <nil> 0))) (home=/ <nil>))
compile: (if (paren (~ ($# ifs) (words <nil> 0))) (ifs=' 	
' <nil>))
compile: (switch (paren (words <nil> ($# prompt))) (brace (; (simple (arglist case 0)) (; (prompt=(paren (words (words <nil> '% ') '	')) <nil>) (; (simple (arglist case 1)) (prompt=(paren (words (words <nil> ($ prompt)) '	')) <nil>))))))
compile: (if (paren (simple (arglist flag p))) (path=(paren (words (words <nil> /bin) /usr/bin)) <nil>))
compile: (if not (brace (; (simple finit) (if (paren (~ ($# path) (words <nil> 0))) (path=(paren (words (words (words (words <nil> .) /bin) /usr/bin) /usr/local/bin)) <nil>)))))
compile: (fn (words <nil> sigexit) <nil>)
compile: (if (paren (! (~ ($# cflag) (words <nil> 0)))) (brace (; (if (paren (&& (simple (arglist flag l)) (simple (arglist (arglist test -r) (^ ($ home) /lib/profile))))) (simple (arglist . (^ ($ home) /lib/profile)))) (; (status='' <nil>) (; (simple (arglist eval ($ cflag))) (simple (arglist exit ($ status))))))))
compile: <nil>
compile: <nil>
compile: (if (paren (~ ($# *) (words <nil> 0))) (simple (arglist . /dev/stdin)))
compile: (if not (brace (; (status='' <nil>) (simple (arglist . ($ *))))))
compile: <nil>
compile: <nil>
compile: (simple (arglist rfork s))
compile: <nil>
compile: (if (paren (! (~ ($ DEBUG) (words <nil> '')))) (simple (arglist (arglist flag x) +)))
compile: <nil>
compile: (LPDELAY=60 <nil>)
compile: <nil>
compile: (if (paren (&& (! (~ ($# *) (words <nil> 2))) (! (~ ($# *) (words <nil> 3))))) (brace (; (>[1=2] (simple (arglist (arglist echo 'usage generic local_cmd _remote_cmd [ success_cmd ]') <nil>))) (simple (arglist exit 'argument count')))))
compile: (LOCAL_CMD=($ 1) <nil>)
compile: (REMOTE_CMD=($ 2) <nil>)
compile: (SUCCESS_CMD=($ 3) <nil>)
compile: <nil>
compile: <nil>
compile: <nil>
compile: <nil>
compile: <nil>
compile: (if (paren (|| (! (~ ($ THIS_HOST) (words <nil> ($ DEST_HOST)))) (! (simple (arglist (arglist (arglist LOCK (^ (^ (^ ($ LPSPOOL) /) ($ LPDEST)) /LOCK)) ($ THIS_HOST)) ($ pid)))))) (simple (arglist exit '')))
compile: <nil>
compile: (simple (arglist cd ($ LPSPOOL)))
compile: <nil>
compile: (MAXTRY=2 <nil>)
compile: (PRINTLOG=(^ (^ (^ ($ LPLOGDIR) /) ($ LPDEST)) .st) <nil>)
compile: <nil>
compile: (fn (words <nil> schedule) (brace (FILE=(` (brace (simple (arglist (arglist (arglist lpsub sched) ($ SCHED)) ($ LPDEST))))) <nil>)))
compile: <nil>
compile: (while (paren (; (simple schedule) (! (~ ($# FILE) (words <nil> 0))))) (brace (; (SCHEDLINE=(` (brace (simple (arglist cat (^ (^ (^ ($ LPDEST) /) ($sub FILE (words <nil> 1))) id))))) <nil>) (; (LSLINE=(` (brace (simple (arglist (arglist ls -l) (^ (^ ($ LPDEST) /) ($sub FILE (words <nil> 1))))))) <nil>) (; (simple (arglist (arglist (arglist echo (` (brace (simple date)))) start) ($ SCHEDLINE))) (; (if (paren (! (simple (arglist (arglist test -s) (^ ($ LPDEST) /.seqno))))) (brace (>(^ ($ LPDEST) /.seqno) (simple (arglist (arglist echo 0) <nil>))))) (; (if not (brace (; (LPSEQNO=(` (brace (| (simple (arglist cat (^ ($ LPDEST) /.seqno))) (simple (arglist awk '{seqno = $1 + 1; if (seqno > 999) seqno = 0; print seqno}')))) <nil>) (>(^ ($ LPDEST) /.seqno) (simple (arglist (arglist echo ($ LPSEQNO)) <nil>)))))) (; (STARTIME=(` (brace (simple date))) <nil>) (; (if (paren (! (simple (arglist (arglist test -s) (^ (^ ($ LPDEST) /) ($sub FILE (words <nil> 1))))))) (brace (; (simple (arglist (arglist (arglist (arglist (arglist (arglist (arglist echo (` (brace (simple date)))) file) (^ (^ ($ LPDEST) /) ($sub FILE (words <nil> 1)))) disappeared) or) is) empty)) (; (simple (arglist (arglist ls -l) ($ LPDEST))) (; (>>($ LPLOG) (simple (arglist (arglist (arglist (arglist (arglist (arglist (arglist echo ($sub SCHEDLINE (words <nil> 2))) ($sub SCHEDLINE (words <nil> 4))) (^ '	' ($sub SCHEDLINE (words <nil> 3)))) ($sub SCHEDLINE (words <nil> 5))) (^ ' ! ' ($sub LSLINE (words <nil> 6)))) ($sub STARTIME (words <nil> 4))) <nil>))) (simple (arglist (arglist (arglist rm -f) (^ (^ ($ LPDEST) /) ($ FILE))) (^ (^ (^ ($ LPDEST) /) ($ FILE)) id)))))))) (if not (brace (; (if (paren (~ ($ THIS_HOST) (words <nil> ($ DEST_HOST)))) (brace (; (if (paren (&& (simple (arglist (arglist test -f) (^ (^ ($ LPLIB) /perm/) ($ LPDEST)))) (simple (arglist (arglist (arglist grep -s) ($sub SCHEDLINE (words <nil> 2))) (^ (^ ($ LPLIB) /perm/) ($ LPDEST)))))) (brace (; (simple (arglist (arglist (arglist echo (` (brace (simple date)))) permission) denied)) (; (| (simple (arglist (arglist (arglist (arglist (arglist (arglist (arglist (arglist echo you) are) not) allowed) to) use) printer) ($ LPDEST))) (simple (arglist mail ($sub SCHEDLINE (words <nil> 2)))) (simple (arglist (arglist (arglist rm -f) (^ (^ ($ LPDEST) /) ($sub FILE (words <nil> 1)))) (^ (^ (^ ($ LPDEST) /) ($sub FILE (words <nil> 1))) id))))))) (if not (brace (; (simple (arglist (arglist (arglist (arglist echo (` (brace (simple date)))) sending) to) printer)) (; (>($ PRINTLOG) <nil>) (; (STARTIME=(` (brace (simple date))) <nil>) (; (@ (brace (simple (arglist eval ($ LOCAL_CMD))))) (; (rv=($ status) <nil>) (; (ENDTIME=(` (brace (simple date))) <nil>) (; (status=($ rv) <nil>) (; (if (paren <nil>) (brace (; (simple (arglist (arglist (arglist (arglist (arglist (arglist echo (^ ($sub SCHEDLINE (words <nil> 1)) ($sub SCHEDLINE (words <nil> 3)))) (^ '	' ($sub SCHEDLINE (words <nil> 2)))) (^ '	' ($sub SCHEDLINE (words <nil> 4)))) (^ ' + ' ($sub LSLINE (words <nil> 6)))) (^ ' ' ($sub STARTIME (words <nil> 4)))) (^ ' ' ($sub ENDTIME (words <nil> 4))))) (; (simple (arglist eval ($ SUCCESS_CMD))) (simple (arglist (arglist (arglist rm -f) (^ (^ ($ LPDEST) /) ($sub FILE (words <nil> 1)))) (^ (^ (^ ($ LPDEST) /) ($sub FILE (words <nil> 1))) id))))))) (if not (brace (; (simple (arglist (arglist (arglist (arglist (arglist (arglist (arglist echo (^ ($sub SCHEDLINE (words <nil> 1)) ($sub SCHEDLINE (words <nil> 3)))) (^ '	' ($sub SCHEDLINE (words <nil> 2)))) (^ '	' ($sub SCHEDLINE (words <nil> 4)))) (^ ' - ' ($sub LSLINE (words <nil> 6)))) (^ ' ' ($sub STARTIME (words <nil> 4)))) (^ ' ' ($sub ENDTIME (words <nil> 4)))) (^ ' status=' ($ rv)))) (; (THISTRY=(` (brace (| (simple (arglist (arglist (arglist echo ($sub SCHEDLINE (words <nil> 4))) +) 1)) (simple hoc))) <nil>) (; (>(^ (^ (^ ($ LPDEST) /) ($sub FILE (words <nil> 1))) id) (simple (arglist (arglist (arglist (arglist (arglist echo ($sub SCHEDLINE (words <nil> 1))) ($sub SCHEDLINE (words <nil> 2))) ($sub SCHEDLINE (words <nil> 3))) ($ THISTRY)) <nil>))) (; (if (paren (simple (arglist (arglist (arglist test ($ THISTRY)) -ge) ($ MAXTRY)))) (brace (; (if (paren (simple (arglist (arglist test -d) (^ (^ ($ LPLIB) /prob/) ($ LPDEST))))) (brace (; (simple (arglist (arglist cp (^ (^ ($ LPDEST) /) ($sub FILE (words <nil> 1)))) (^ (^ ($ LPLIB) /prob/) ($ LPDEST)))) (; (simple (arglist (arglist cp (^ (^ (^ ($ LPDEST) /) ($sub FILE (words <nil> 1))) id)) (^ (^ ($ LPLIB) /prob/) ($ LPDEST)))) (simple (arglist (arglist cp ($ PRINTLOG)) (^ (^ (^ (^ (^ ($ LPLIB) /prob/) ($ LPDEST)) /) ($sub FILE (words <nil> 1))) log))))))) (; (upasname=daemon <nil>) (; (<<HERE (simple (arglist (arglist mail ($sub SCHEDLINE (words <nil> 2))) <nil>))) (simple (arglist (arglist (arglist rm -f) (^ (^ ($ LPDEST) /) ($sub FILE (words <nil> 1)))) (^ (^ (^ ($ LPDEST) /) ($sub FILE (words <nil> 1))) id)))))))) (if not (brace (; (simple (arglist touch (^ (^ ($ LPDEST) /) ($sub FILE (words <nil> 1))))) (simple (arglist sleep ($ LPDELAY))))))))))))))))))))))))) (if not (brace (; (simple (arglist (arglist (arglist (arglist (arglist (arglist (arglist echo (` (brace (simple date)))) queuing) -) should) not) get) here)) (; (STARTIME=(` (brace (simple date))) <nil>) (; (simple (arglist eval ($ REMOTE_CMD))) (; (rv=($ status) <nil>) (; (ENDTIME=(` (brace (simple date))) <nil>) (; (if (paren (~ ($ rv) (words <nil> ''))) (brace (; (simple (arglist (arglist (arglist (arglist (arglist (arglist echo (^ ($sub SCHEDLINE (words <nil> 1)) ($sub SCHEDLINE (words <nil> 3)))) (^ '	' ($sub SCHEDLINE (words <nil> 2)))) (^ '	' ($sub SCHEDLINE (words <nil> 4)))) (^ ' + ' ($sub LSLINE (words <nil> 6)))) (^ ' ' ($sub STARTIME (words <nil> 4)))) (^ ' ' ($sub ENDTIME (words <nil> 4))))) (simple (arglist (arglist (arglist rm -f) (^ (^ ($ LPDEST) /) ($sub FILE (words <nil> 1)))) (^ (^ (^ ($ LPDEST) /) ($sub FILE (words <nil> 1))) id)))))) (if not (brace (; (simple (arglist (arglist (arglist (arglist (arglist (arglist echo (^ ($sub SCHEDLINE (words <nil> 1)) ($sub SCHEDLINE (words <nil> 3)))) (^ '	' ($sub SCHEDLINE (words <nil> 2)))) (^ '	' ($sub SCHEDLINE (words <nil> 4)))) (^ ' - ' ($sub LSLINE (words <nil> 6)))) (^ ' ' ($sub STARTIME (words <nil> 4)))) (^ ' ' ($sub ENDTIME (words <nil> 4))))) (; (simple (arglist (arglist (arglist (arglist echo status) ($ rv)) from) '$REMOTE_CMD')) (; (THISTRY=(` (brace (| (simple (arglist (arglist (arglist echo ($sub SCHEDLINE (words <nil> 4))) +) 1)) (simple hoc))) <nil>) (; (>(^ (^ (^ ($ LPDEST) /) ($sub FILE (words <nil> 1))) id) (simple (arglist (arglist (arglist (arglist (arglist echo ($sub SCHEDLINE (words <nil> 1))) ($sub SCHEDLINE (words <nil> 2))) ($sub SCHEDLINE (words <nil> 3))) ($ THISTRY)) <nil>))) (; (if (paren (~ ($ THISTRY) (words <nil> ($ MAXTRY)))) (brace (; (upasname=daemon <nil>) (<<HERE (simple (arglist (arglist mail ($sub SCHEDLINE (words <nil> 2))) <nil>)))))) (if not (brace (; (simple (arglist touch (^ (^ ($ LPDEST) /) ($sub FILE (words <nil> 1))))) (; (simple (arglist sleep ($ LPDELAY))) (; (LPDELAY=(` (brace (| (simple (arglist (arglist (arglist echo ($ LPDELAY)) '*') 2)) (simple hoc))) <nil>) (if (paren (simple (arglist (arglist (arglist test ($ LPDELAY)) -gt) 960))) (LPDELAY=60 <nil>))))))))))))))))))))))))))))))))))
compile: (simple (arglist UNLOCK (^ (^ ($ LPSPOOL) /) ($ LPDEST))))
compile: (>[2]/dev/null (simple (arglist (arglist rm (^ (^ ($ LPSPOOL) /) ($ LPDEST))) <nil>)))
compile: (simple (arglist exit ($ status)))
