compile: <nil>
compile: (if (paren (~ ($# home) (words <nil> 0))) (home=($ HOME) <nil>))
compile: (if (paren (~ ($# home) (words <nil> 0))) (home=/ <nil>))
compile: (if (paren (~ ($# ifs) (words <nil> 0))) (ifs=' 	
' <nil>))
compile: (switch (paren (words <nil> ($# prompt))) (brace (; (simple (arglist case 0)) (; (prompt=(paren (words (words <nil> '% ') '	')) <nil>) (; (simple (arglist case 1)) (prompt=(paren (words (words <nil> ($ prompt)) '	')) <nil>))))))
compile: (if (paren (simple (arglist flag p))) (path=(paren (words (words <nil> /bin) /usr/bin)) <nil>))
compile: (if not (brace (; (simple finit) (if (paren (~ ($# path) (words <nil> 0))) (path=(paren (words (words (words (words <nil> .) /bin) /usr/bin) /usr/local/bin)) <nil>)))))
compile: (fn (words <nil> sigexit) <nil>)
compile: (if (paren (! (~ ($# cflag) (words <nil> 0)))) (brace (; (if (paren (&& (simple (arglist flag l)) (simple (arglist (arglist test -r) (^ ($ home) /lib/profile))))) (simple (arglist . (^ ($ home) /lib/profile)))) (; (status='' <nil>) (; (simple (arglist eval ($ cflag))) (simple (arglist exit ($ status))))))))
compile: <nil>
compile: <nil>
compile: (if (paren (~ ($# *) (words <nil> 0))) (simple (arglist . /dev/stdin)))
compile: (if not (brace (; (status='' <nil>) (simple (arglist . ($ *))))))
compile: <nil>
compile: <nil>
compile: <nil>
compile: <nil>
compile: (TMPFILE=(^ /tmp/lp ($ pid)) <nil>)
compile: (fn (words <nil> sigexit) (brace (simple (arglist (arglist rm -f) ($ TMPFILE)))))
compile: (if (paren (! (~ ($ DEBUG) (words <nil> '')))) (simple (arglist (arglist flag x) +)))
compile: (if (paren (~ ($ LPCLASS) (words <nil> *nohead*))) (NOHEAD=1 <nil>))
compile: (if (paren (~ ($ LPCLASS) (words <nil> *duplex*))) (DUPLEX=1 <nil>))
compile: (>($ TMPFILE) (simple (arglist cat <nil>)))
compile: (FILETYPE=(` (brace (simple (arglist file ($ TMPFILE))))) <nil>)
compile: (switch (paren (words <nil> ($sub FILETYPE (words <nil> 2)))) (brace (; (simple (arglist case troff)) (; (switch (paren (words <nil> ($ LPCLASS))) (brace (; (simple (arglist (arglist (arglist case *Latin1*) *post*) *opost*)) (; (switch (paren (words <nil> ($sub FILETYPE (words <nil> 5)))) (brace (; (simple (arglist (arglist case Latin1) post)) (; (| (<($ TMPFILE) (simple (arglist (arglist (arglist (arglist (arglist (arglist tcs -s) -f) utf) -t) latin1) <nil>))) (simple (^ ($ LPLIB) /process/dpost)) (; (simple (arglist case UTF)) (<($ TMPFILE) (simple (arglist (^ ($ LPLIB) /process/tr2post) <nil>)))))))) (; (simple (arglist case *)) (>[1=2] (simple (arglist (arglist (arglist (arglist (arglist (arglist (arglist (arglist echo ($sub FILETYPE (words <nil> 2))) (^ -T ($sub FILETYPE (words <nil> 5)))) output) is) improper) for) ($ LPDEST)) <nil>)))))))) (; (simple (arglist case special)) (; (switch (paren (words <nil> ($sub FILETYPE (words <nil> 4)))) (brace (; (simple (arglist case '#b')) (; (switch (paren (words <nil> ($ LPCLASS))) (brace (; (simple (arglist case *post*)) (<($ TMPFILE) (simple (arglist (^ ($ LPLIB) /process/p9bitpost) <nil>)))))) (; (simple (arglist case *)) (>[1=2] (simple (arglist (arglist (arglist (arglist (arglist (arglist (arglist echo ($ FILETYPE)) file) is) improper) for) ($ LPDEST)) <nil>)))))))) (; (simple (arglist (arglist (arglist case Compressed) plan) old)) (; (switch (paren (words <nil> ($ LPCLASS))) (brace (; (simple (arglist case *post*)) (<($ TMPFILE) (simple (arglist (^ ($ LPLIB) /process/p9bitpost) <nil>)))))) (; (simple (arglist case jpeg)) (; (switch (paren (words <nil> ($ LPCLASS))) (brace (; (simple (arglist case *post*)) (<($ TMPFILE) (simple (arglist (^ ($ LPLIB) /process/jpgpost) <nil>)))))) (; (simple (arglist case GIF)) (; (switch (paren (words <nil> ($ LPCLASS))) (brace (; (simple (arglist case *post*)) (<($ TMPFILE) (simple (arglist (^ ($ LPLIB) /process/gifpost) <nil>)))))) (; (simple (arglist case ccitt-g31)) (; (switch (paren (words <nil> ($ LPCLASS))) (brace (; (simple (arglist case *post*)) (<($ TMPFILE) (simple (arglist (^ ($ LPLIB) /process/g3post) <nil>)))))) (; (simple (arglist case bitmap)) (; (switch (paren (words <nil> ($ LPCLASS))) (brace (; (simple (arglist case *post*)) (; (<($ TMPFILE) (simple (arglist (^ ($ LPLIB) /process/bpost) <nil>))) (; (simple (arglist case *mhcc*)) (; (| (<($ TMPFILE) (simple (arglist (^ ($ LPLIB) /process/bpost) <nil>))) (simple (^ ($ LPLIB) /process/mhcc)) (; (simple (arglist case *)) (>[1=2] (simple (arglist (arglist (arglist (arglist (arglist (arglist (arglist echo ($sub FILETYPE (words <nil> 2))) file) is) improper) for) ($ LPDEST)) <nil>)))))))))) (; (simple (arglist case tex)) (; (simple (arglist (arglist mv ($ TMPFILE)) (^ ($ TMPFILE) .dvi))) (; (TMPFILE=(^ ($ TMPFILE) .dvi) <nil>) (; (switch (paren (words <nil> ($ LPCLASS))) (brace (; (simple (arglist case *post*)) (; (simple (arglist (^ ($ LPLIB) /process/dvipost) ($ TMPFILE))) (; (simple (arglist case *)) (>[1=2] (simple (arglist (arglist (arglist (arglist (arglist (arglist (arglist echo ($sub FILETYPE (words <nil> 2))) file) is) improper) for) ($ LPDEST)) <nil>)))))))) (; (simple (arglist case postscript)) (; (switch (paren (words <nil> ($ LPCLASS))) (brace (; (simple (arglist case *post*)) (; (<($ TMPFILE) (simple (arglist (^ ($ LPLIB) /process/post) <nil>))) (; (simple (arglist case *)) (>[1=2] (simple (arglist (arglist (arglist (arglist (arglist (arglist (arglist echo ($sub FILETYPE (words <nil> 2))) file) is) improper) for) ($ LPDEST)) <nil>)))))))) (; (simple (arglist case HPJCL)) (; (switch (paren (words <nil> ($ LPCLASS))) (brace (; (simple (arglist case *HPJCL*)) (; (<($ TMPFILE) (simple (arglist (^ ($ LPLIB) /process/noproc) <nil>))) (; (simple (arglist case *)) (>[1=2] (simple (arglist (arglist (arglist (arglist (arglist (arglist (arglist echo ($sub FILETYPE (words <nil> 2))) file) is) improper) for) ($ LPDEST)) <nil>)))))))) (; (simple (arglist case daisy)) (; (switch (paren (words <nil> ($ LPDEST))) (brace (; (simple (arglist case *)) (>[1=2] (simple (arglist (arglist (arglist (arglist (arglist (arglist (arglist echo ($sub FILETYPE (words <nil> 2))) file) is) improper) for) ($ LPDEST)) <nil>)))))) (; (simple (arglist (arglist (arglist (arglist (arglist (arglist (arglist (arglist (arglist (arglist (arglist (arglist (arglist (arglist (arglist (arglist case English) short) extended) alef) limbo) [Aa]scii) ASCII) assembler) c) latin) rc) sh) as) mail) email) message/rfc822)) (; (switch (paren (words <nil> ($ LPCLASS))) (brace (; (simple (arglist case *post*)) (; (<($ TMPFILE) (simple (arglist (^ ($ LPLIB) /process/ppost) <nil>))) (; (simple (arglist case *canon*)) (; (<($ TMPFILE) (simple (arglist (arglist (^ ($ LPLIB) /process/can) ($ *)) <nil>))) (; (simple (arglist case *)) (>[1=2] (simple (arglist (arglist (arglist (arglist (arglist (arglist (arglist (arglist echo Unrecognized) class) of) line) printer) for) ($ LPDEST)) <nil>)))))))))) (; (simple (arglist case tiff)) (; (switch (paren (words <nil> ($ LPCLASS))) (brace (; (simple (arglist case *post*)) (; (simple (arglist (^ ($ LPLIB) /process/tiffpost) ($ TMPFILE))) (; (simple (arglist case *)) (>[1=2] (simple (arglist (arglist (arglist (arglist (arglist (arglist (arglist (arglist echo Unrecognized) class) of) line) printer) for) ($ LPDEST)) <nil>)))))))) (; (simple (arglist case PDF)) (; (switch (paren (words <nil> ($ LPCLASS))) (brace (; (simple (arglist case *post*)) (; (simple (arglist (^ ($ LPLIB) /process/pdfpost) ($ TMPFILE))) (; (simple (arglist case *)) (>[1=2] (simple (arglist (arglist (arglist (arglist (arglist (arglist (arglist (arglist echo Unrecognized) class) of) line) printer) for) ($ LPDEST)) <nil>)))))))) (; (simple (arglist case empty)) (; (>[1=2] (simple (arglist (arglist (arglist (arglist echo file) is) empty) <nil>))) (; (simple (arglist case cannot)) (; (>[1=2] (simple (arglist (arglist (arglist (arglist echo cannot) open) file) <nil>))) (; (simple (arglist case *)) (>[1=2] (simple (arglist (arglist (arglist (arglist (arglist (arglist (arglist echo ($sub FILETYPE (words <nil> 2))) file) is) improper) for) ($ LPDEST)) <nil>))))))))))))))))))))))))))))))))))))))))
compile: (simple wait)
compile: (rv=($ status) <nil>)
compile: (simple (arglist (arglist rm -f) ($ TMPFILE)))
compile: <nil>
compile: (simple exit)
compile: (simple (arglist exit ($ status)))
