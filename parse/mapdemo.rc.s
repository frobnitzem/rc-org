compile: <nil>
compile: (if (paren (~ ($# home) (words <nil> 0))) (home=($ HOME) <nil>))
compile: (if (paren (~ ($# home) (words <nil> 0))) (home=/ <nil>))
compile: (if (paren (~ ($# ifs) (words <nil> 0))) (ifs=' 	
' <nil>))
compile: (switch (paren (words <nil> ($# prompt))) (brace (; (simple (arglist case 0)) (; (prompt=(paren (words (words <nil> '% ') '	')) <nil>) (; (simple (arglist case 1)) (prompt=(paren (words (words <nil> ($ prompt)) '	')) <nil>))))))
compile: (if (paren (simple (arglist flag p))) (path=(paren (words (words <nil> /bin) /usr/bin)) <nil>))
compile: (if not (brace (; (simple finit) (if (paren (~ ($# path) (words <nil> 0))) (path=(paren (words (words (words (words <nil> .) /bin) /usr/bin) /usr/local/bin)) <nil>)))))
compile: (fn (words <nil> sigexit) <nil>)
compile: (if (paren (! (~ ($# cflag) (words <nil> 0)))) (brace (; (if (paren (&& (simple (arglist flag l)) (simple (arglist (arglist test -r) (^ ($ home) /lib/profile))))) (simple (arglist . (^ ($ home) /lib/profile)))) (; (status='' <nil>) (; (simple (arglist eval ($ cflag))) (simple (arglist exit ($ status))))))))
compile: <nil>
compile: <nil>
compile: (if (paren (~ ($# *) (words <nil> 0))) (simple (arglist . /dev/stdin)))
compile: (if not (brace (; (status='' <nil>) (simple (arglist . ($ *))))))
compile: <nil>
compile: <nil>
compile: (fn (words <nil> demo) (brace (; (proj=($ 1) <nil>) (; (simple shift) (; (label=($ 1) <nil>) (; (simple shift) (; (brace (; (simple (arglist echo 'o')) (; (simple (arglist echo 'ra -8192 -8492 8192 8492')) (; (simple (arglist echo 'e')) (; (simple (arglist echo 'm -8192 8192')) (; (simple (arglist (arglist echo t) ($ type))) (; (simple (arglist echo 'm -8192 -8192')) (; (simple (arglist (arglist (arglist (arglist echo t) ($ proj)) -) ($ label))) (MAP=world (MAPDIR=(^ ($ PLAN9) /map) (simple (arglist (arglist (arglist (arglist (arglist map ($ proj)) ($ *)) -s) -d) 5)))))))))))) (simple (arglist sleep 5)))))))))
compile: <nil>
compile: (simple (arglist rfork en))
compile: (| (brace (; (type='Equatorial projections centered on long. 0. Parallels are straight lines.' <nil>) (; (simple (arglist (arglist demo mercator) 'equally spaced straight meridians, conformal, straight compass courses')) (; (simple (arglist (arglist demo sinusoidal) 'equally spaced parallels, equal-area, same as bonne(0)')) (; (simple (arglist (arglist (arglist demo cylequalarea) 'equally spaced straight meridians, equal-area, true scale on Eq') 0)) (; (simple (arglist (arglist demo cylindrical) 'central projection on tangent cylinder')) (; (simple (arglist (arglist (arglist demo rectangular) 'equally spaced parallels, equally spaced straight meridians, true scale on Eq') 0)) (; (simple (arglist (arglist (arglist demo gall) 'parallels spaced stereographically on prime meridian, equally spaced straight meridians, true scale on Eq') 0)) (; (simple (arglist (arglist demo mollweide) '(homalographic) equal-area, hemisphere is a circle')) (; (simple (arglist (arglist demo gilbert) 'globe mapped conformally on hemisphere, viewed orthographically')) (; (type='Azimuthal: centered on the North Pole, Parallels are concentric circles, Meridians are equally spaced radial lines' <nil>) (; (simple (arglist (arglist demo azequidistant) 'equally spaced parallels, true distances from pole')) (; (simple (arglist (arglist demo azequalarea) 'equal area')) (; (simple (arglist (arglist demo gnomonic) 'central projecton on tangent plane, straight great circles')) (; (simple (arglist (arglist (arglist demo perspective) 'viewed along earth''s axis 2 earth radii from center of earth') 2)) (; (simple (arglist (arglist demo orthographic) 'viewed from infinity')) (; (simple (arglist (arglist demo stereographic) 'conformal, projected from opposite pole')) (; (simple (arglist (arglist demo laue) 'radius = tan(2\(mu colatitude ), used in xray crystallography')) (; (simple (arglist (arglist (arglist (arglist (arglist (arglist demo fisheye) 'fisheye view of stereographic map, index of refraction 2') 2) -o) 40.75) 74)) (; (simple (arglist (arglist (arglist (arglist (arglist (arglist demo newyorker) 'New Yorker map from viewing pedestal of radius .5') .5) -o) 40.75) 74)) (; (type='Polar conic projections symmetric about the Prime Meridian. Parallels are segments of concentric circles.' <nil>) (; (simple (arglist (arglist (arglist demo conic) 'central projection on cone tangent at 40') 40)) (; (simple (arglist (arglist (arglist (arglist demo simpleconic) 'equally spaced parallels, true scale on 20 and 50') 20) 50)) (; (simple (arglist (arglist (arglist (arglist demo lambert) 'conformal, true scale on 20 and 50') 20) 50)) (; (simple (arglist (arglist (arglist (arglist demo albers) 'equal-area, true scale on 20 and 50') 20) 50)) (; (simple (arglist (arglist (arglist demo bonne) 'equally spaced parallels, equal-area, parallel 40 developed from tangent cone') 40)) (; (type='Projections with bilateral symmetry about the Prime Meridian and the equator.' <nil>) (; (simple (arglist (arglist demo polyconic) 'parallels developed from tangent cones, equally spaced along Prime Meridian')) (; (simple (arglist (arglist demo aitoff) 'equal-area projection of globe onto 2-to-1 ellipse, based on azequalarea')) (; (simple (arglist (arglist demo lagrange) 'conformal, maps whole sphere into a circle')) (; (simple (arglist (arglist (arglist demo bicentric) 'points plotted at true azimuth from two centers on the equator at longitudes +-40, great circles are straight lines') 40)) (; (simple (arglist (arglist (arglist demo elliptic) 'points are plotted at true distance from two centers on the equator at longitudes +-40') 40)) (; (simple (arglist (arglist demo globular) 'hemisphere is circle, circular meridians and parallels')) (; (simple (arglist (arglist demo vandergrinten) 'sphere is circle, meridians as in globular, circular arc parallels resemble mercator')) (; (type='Doubly periodic conformal projections.' <nil>) (; (simple (arglist (arglist demo guyou) 'W and E hemispheres are square')) (; (simple (arglist (arglist demo square) 'World is square with Poles at diagonally opposite corners')) (; (simple (arglist (arglist demo tetra) 'map on tetrahedron with edge tangent to Prime Meridian at S Pole, unfolded into equilateral triangle')) (; (simple (arglist (arglist demo hex) 'world is hexagon centered on N Pole, N and S hemispheres are equilateral
triangles')) (; (type='Retroazimuthal projections. Directions to center are true.' <nil>) (; (simple (arglist (arglist (arglist (arglist (arglist (arglist demo mecca) 'equally spaced vertical meridians') 21.4) -o) 90) -39.8)) (; (simple (arglist (arglist (arglist (arglist (arglist (arglist demo homing) 'distances to Mecca are true') 21.4) -o) 90) -39.8)) (; (type='Miscellaneous projections.' <nil>) (; (simple (arglist (arglist (arglist (arglist demo harrison) 'oblique perspective from above the North Pole, 2 earth radii from the earth, looking along the Date Line 40 degrees off vertical') 2) 40)) (; (simple (arglist (arglist (arglist (arglist demo trapezoidal) 'equally spaced parallels, straight meridians equally spaced along parallels, true scale at 20 and 50 on Prime Meridian') 20) 50)) (; (simple (arglist (arglist (arglist (arglist demo lune) 'conformal, polar cap above Eq is 60-degree lune') 0) 60)) (; (type='Maps based on the spheroid' <nil>) (; (simple (arglist (arglist demo sp_mercator) 'equally spaced straight meridians, conformal')) (simple (arglist (arglist (arglist (arglist demo sp_albers) 'equal-area, true scale on 20 and 50') 20) 50)))))))))))))))))))))))))))))))))))))))))))))))))) (simple plot)
compile: (simple (arglist exit ($ status)))
