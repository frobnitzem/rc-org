compile: <nil>
compile: (if (paren (~ ($# home) (words <nil> 0))) (home=($ HOME) <nil>))
compile: (if (paren (~ ($# home) (words <nil> 0))) (home=/ <nil>))
compile: (if (paren (~ ($# ifs) (words <nil> 0))) (ifs=' 	
' <nil>))
compile: (switch (paren (words <nil> ($# prompt))) (brace (; (simple (arglist case 0)) (; (prompt=(paren (words (words <nil> '% ') '	')) <nil>) (; (simple (arglist case 1)) (prompt=(paren (words (words <nil> ($ prompt)) '	')) <nil>))))))
compile: (if (paren (simple (arglist flag p))) (path=(paren (words (words <nil> /bin) /usr/bin)) <nil>))
compile: (if not (brace (; (simple finit) (if (paren (~ ($# path) (words <nil> 0))) (path=(paren (words (words (words (words <nil> .) /bin) /usr/bin) /usr/local/bin)) <nil>)))))
compile: (fn (words <nil> sigexit) <nil>)
compile: (if (paren (! (~ ($# cflag) (words <nil> 0)))) (brace (; (if (paren (&& (simple (arglist flag l)) (simple (arglist (arglist test -r) (^ ($ home) /lib/profile))))) (simple (arglist . (^ ($ home) /lib/profile)))) (; (status='' <nil>) (; (simple (arglist eval ($ cflag))) (simple (arglist exit ($ status))))))))
compile: <nil>
compile: <nil>
compile: (if (paren (~ ($# *) (words <nil> 0))) (simple (arglist . /dev/stdin)))
compile: (if not (brace (; (status='' <nil>) (simple (arglist . ($ *))))))
compile: <nil>
compile: <nil>
compile: (if (paren (! (~ ($# *) (words <nil> 2)))) (brace (; (>[1=2] (simple (arglist (arglist echo 'usage: mount addr mtpt') <nil>))) (simple (arglist exit usage)))))
compile: (switch (paren (words <nil> (` (brace (simple uname))))) (brace (; (simple (arglist case Linux)) (; (if (paren (simple (arglist (arglist (arglist (arglist 9 grep) -si) '	9p(2000)?$') /proc/filesystems))) (brace (; (if (paren (simple (arglist (arglist (arglist u test) -S) ($ 1)))) (simple (arglist (arglist (arglist (arglist (arglist (arglist (arglist (arglist exec u) mount) -t) 9p) -o) (^ (^ (^ (^ trans '=') unix,uname) '=') ($ USER))) ($ 1)) ($ 2)))) (simple (arglist (arglist (arglist (arglist (arglist (arglist (arglist (arglist exec u) mount) -t) 9p) -o) (^ (^ (^ (^ trans '=') tcp,uname) '=') ($ USER))) ($ 1)) ($ 2)))))) (; (if (paren (simple (arglist (arglist (arglist (arglist 9 grep) -si) '	fuse$') /proc/filesystems))) (simple (arglist (arglist (arglist exec 9pfuse) ($ 1)) ($ 2)))) (; (>[1=2] (simple (arglist (arglist echo 'don''t know how to mount (no 9p, no fuse)') <nil>))) (; (simple (arglist case FreeBSD)) (; (if (paren (| (simple kldstat) (simple (arglist (arglist (arglist 9 grep) -si) ' fuse'))) (simple (arglist (arglist (arglist exec 9pfuse) ($ 1)) ($ 2)))) (; (>[1=2] (simple (arglist (arglist echo 'don''t know how to mount (no fuse)') <nil>))) (; (simple (arglist case Darwin)) (; (version=(` (brace (| (simple (arglist sw_vers -productVersion)) (simple (arglist (arglist cut -d.) -f1,2)))) <nil>) (; (major_version=(` (brace (| (simple (arglist echo ($ version))) (simple (arglist (arglist cut -d.) -f1)))) <nil>) (; (if (paren (|| (|| (|| (|| (|| (|| (|| (|| (|| (| (>[2]/dev/null (simple (arglist (arglist sysctl fuse.version) <nil>))) (simple (arglist (arglist (arglist 9 grep) -si) 'fuse.version')) (| (>[2]/dev/null (simple (arglist (arglist sysctl macfuse.version.number) <nil>))) (simple (arglist (arglist (arglist 9 grep) -si) 'fuse.version'))) (| (>[2]/dev/null (simple (arglist (arglist sysctl osxfuse.version.number) <nil>))) (simple (arglist (arglist (arglist 9 grep) -si) 'fuse.version'))) (simple (arglist (arglist test -d) /System/Library/Extensions/fusefs.kext))) (simple (arglist (arglist test -d) (^ (^ /Library/Filesystems/osxfuse.fs/Contents/Extensions/ ($ version)) /osxfuse.kext)))) (simple (arglist (arglist test -d) (^ (^ /Library/Filesystems/macfuse.fs/Contents/Extensions/ ($ version)) /macfuse.kext)))) (simple (arglist (arglist test -d) (^ (^ /Library/Filesystems/macfuse.fs/Contents/Extensions/ ($ major_version)) /macfuse.kext)))) (simple (arglist (arglist test -d) /Library/Filesystems/osxfusefs.fs/Support/osxfusefs.kext))) (simple (arglist (arglist test -d) /opt/local/Library/Filesystems/osxfuse.fs))) (simple (arglist (arglist test -d) /Library/Filesystems/fusefs.fs/Support/fusefs.kext)))) (simple (arglist (arglist (arglist exec 9pfuse) ($ 1)) ($ 2)))) (; (>[1=2] (simple (arglist (arglist echo 'don''t know how to mount (no fuse)') <nil>))) (; (simple (arglist case *)) (>[1=2] (simple (arglist (arglist (arglist echo 'can''t mount on') (` (brace (simple uname)))) <nil>))))))))))))))))))
compile: (simple (arglist exit nomount))
compile: (simple (arglist exit ($ status)))
